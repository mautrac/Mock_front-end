{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\vti\\\\reactjs\\\\Lesson_Resource_Registration_Login_CRUD Demo\\\\Frontend\\\\GroupManagementFrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\vti\\\\reactjs\\\\Lesson_Resource_Registration_Login_CRUD Demo\\\\Frontend\\\\GroupManagementFrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"F:\\\\vti\\\\reactjs\\\\Lesson_Resource_Registration_Login_CRUD Demo\\\\Frontend\\\\GroupManagementFrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\vti\\\\reactjs\\\\Lesson_Resource_Registration_Login_CRUD Demo\\\\Frontend\\\\GroupManagementFrontEnd\\\\src\\\\pages\\\\acount\\\\AddAccountAdmin.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Card, CardBody, Col, Container, FormGroup, Row, Modal, ModalBody, ModalFooter, ModalHeader, Label } from \"reactstrap\";\nimport { FastField, Form, Formik, Field } from \"formik\";\nimport { ReactstrapInput } from \"reactstrap-formik\";\nimport * as Yup from 'yup';\nimport userApi from '../../api/UserApi';\nimport store from \"../../redux/store\";\nimport { toastr } from \"react-redux-toastr\";\n\nfunction AddAccountAdmin(props) {\n  var _this = this;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpenModalCreate = _useState2[0],\n      setOpenModalCreate = _useState2[1];\n\n  var showSuccessNotification = function showSuccessNotification(title, message) {\n    var options = {\n      timeOut: 3000,\n      showCloseButton: false,\n      progressBar: false,\n      position: \"top-right\"\n    }; // show notification\n\n    toastr.success(title, message, options);\n  };\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    isOpen: isOpenModalCreate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      firstname: '',\n      lastName: '',\n      userName: '',\n      password: '',\n      confirmPassword: '',\n      email: '',\n      role: ''\n    },\n    validationSchema: Yup.object({\n      firstname: Yup.string().required(\"Required\").min(1, 'Required'),\n      lastName: Yup.string().required(\"Required\").min(1, 'Required'),\n      userName: Yup.string().min(6, 'Must be between 6 and 50 characters').max(50, 'Must be between 6 and 50 characters').required('Required').test('checkUniqueUserName', 'This user name is already registered.', /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(userName) {\n          var isExists;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return userApi.existsByUsername(userName);\n\n                case 2:\n                  isExists = _context.sent;\n                  return _context.abrupt(\"return\", !isExists);\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()),\n      password: Yup.string().min(6, 'Must be between 6 and 50 characters').max(50, 'Must be between 6 and 50 characters').required('Required'),\n      confirmPassword: Yup.string().required('Required').when(\"password\", {\n        is: function is(value) {\n          return value && value.length > 0 ? true : false;\n        },\n        then: Yup.string().oneOf([Yup.ref(\"password\")], \"Confirm Password do not match\")\n      }),\n      email: Yup.string().email('Invalid email address').required('Required').test('checkExistsEmail', 'This email is already registered.', /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(email) {\n          var isExists;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return userApi.existsByEmail(email);\n\n                case 2:\n                  isExists = _context2.sent;\n                  return _context2.abrupt(\"return\", !isExists);\n\n                case 4:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }())\n    }),\n    onSubmit: /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(values) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return userApi.createAccountFromAdmin(values);\n\n              case 3:\n                // show notification\n                showSuccessNotification(\"Create Addcount\", \"Create Account Successfully!\"); // close modal\n\n                setOpenModalCreate(false); // Refresh table\n\n                props.refreshForm();\n                _context3.next = 13;\n                break;\n\n              case 8:\n                _context3.prev = 8;\n                _context3.t0 = _context3[\"catch\"](0);\n                console.log(_context3.t0);\n                setOpenModalCreate(false); // redirect page error server\n\n                props.history.push(\"/auth/500\");\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[0, 8]]);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    validateOnChange: false,\n    validateOnBlur: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, function (_ref4) {\n    var isSubmitting = _ref4.isSubmitting;\n    return /*#__PURE__*/React.createElement(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 15\n      }\n    }, \"Create Account\"), /*#__PURE__*/React.createElement(ModalBody, {\n      className: \"m-3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(FastField, {\n      label: \"First Name\",\n      type: \"text\",\n      bsSize: \"lg\",\n      name: \"firstName\",\n      placeholder: \"Enter first name\",\n      component: ReactstrapInput,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FastField, {\n      label: \"Last Name\",\n      type: \"text\",\n      bsSize: \"lg\",\n      name: \"lastName\",\n      placeholder: \"Enter last name\",\n      component: ReactstrapInput,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FastField, {\n      label: \"Username\",\n      type: \"text\",\n      bsSize: \"lg\",\n      name: \"userName\",\n      placeholder: \"Enter username\",\n      component: ReactstrapInput,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FastField, {\n      label: \"Email\",\n      type: \"email\",\n      bsSize: \"lg\",\n      name: \"email\",\n      placeholder: \"Enter email\",\n      component: ReactstrapInput,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FastField, {\n      label: \"Password\",\n      type: \"password\",\n      bsSize: \"lg\",\n      name: \"password\",\n      placeholder: \"Enter password\",\n      component: ReactstrapInput,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FastField, {\n      label: \"Confirm Password\",\n      type: \"password\",\n      bsSize: \"lg\",\n      name: \"confirmPassword\",\n      placeholder: \"Enter confirm password\",\n      component: ReactstrapInput,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      \"label-for\": \"role\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 21\n      }\n    }, \"Select role\"), /*#__PURE__*/React.createElement(Field, {\n      as: \"select\",\n      name: \"role\",\n      placeholder: \"Select role\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"admin\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 23\n      }\n    }, \"Admin\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"manager\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 23\n      }\n    }, \"Manager\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"user\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 23\n      }\n    }, \"User\")))), /*#__PURE__*/React.createElement(ModalFooter, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      color: \"primary\",\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }\n    }, \"Save\"), \" \", /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      onClick: function onClick() {\n        return setOpenModalCreate(false);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }\n    }, \"Close\")));\n  }));\n}\n\nexport default AddAccountAdmin;","map":{"version":3,"sources":["F:/vti/reactjs/Lesson_Resource_Registration_Login_CRUD Demo/Frontend/GroupManagementFrontEnd/src/pages/acount/AddAccountAdmin.js"],"names":["React","useEffect","useState","Button","Card","CardBody","Col","Container","FormGroup","Row","Modal","ModalBody","ModalFooter","ModalHeader","Label","FastField","Form","Formik","Field","ReactstrapInput","Yup","userApi","store","toastr","AddAccountAdmin","props","isOpenModalCreate","setOpenModalCreate","showSuccessNotification","title","message","options","timeOut","showCloseButton","progressBar","position","success","firstname","lastName","userName","password","confirmPassword","email","role","object","string","required","min","max","test","existsByUsername","isExists","when","is","value","length","then","oneOf","ref","existsByEmail","values","createAccountFromAdmin","refreshForm","console","log","history","push","isSubmitting"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Container,\r\n  FormGroup,\r\n  Row,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Label,\r\n} from \"reactstrap\";\r\nimport { FastField, Form, Formik, Field } from \"formik\";\r\nimport { ReactstrapInput } from \"reactstrap-formik\";\r\nimport * as Yup from 'yup';\r\nimport userApi from '../../api/UserApi'\r\nimport store from \"../../redux/store\";\r\nimport { toastr } from \"react-redux-toastr\";\r\n\r\nfunction AddAccountAdmin(props) {\r\n\r\n  const [isOpenModalCreate, setOpenModalCreate] = useState(true);\r\n  \r\n  const showSuccessNotification = (title, message) => {\r\n    const options = {\r\n      timeOut: 3000,\r\n      showCloseButton: false,\r\n      progressBar: false,\r\n      position: \"top-right\"\r\n    };\r\n\r\n    // show notification\r\n    toastr.success(title, message, options);\r\n  }\r\n\r\n  return (\r\n    <Modal isOpen={isOpenModalCreate}>\r\n        <Formik\r\n            initialValues={\r\n                {\r\n                    firstname: '',\r\n                    lastName: '',\r\n                    userName: '',\r\n                    password: '',\r\n                    confirmPassword: '',\r\n                    email: '',\r\n                    role: ''\r\n                }\r\n            }\r\n            validationSchema={\r\n                Yup.object({\r\n                    firstname: Yup.string()\r\n                        .required(\"Required\")\r\n                        .min(1, 'Required'),\r\n                    lastName: Yup.string()\r\n                        .required(\"Required\")\r\n                        .min(1, 'Required'),\r\n                    userName: Yup.string()\r\n                        .min(6, 'Must be between 6 and 50 characters')\r\n                        .max(50, 'Must be between 6 and 50 characters')\r\n                        .required('Required')\r\n                        .test('checkUniqueUserName', 'This user name is already registered.', async userName => {\r\n                        // call api\r\n                        const isExists = await userApi.existsByUsername(userName);\r\n                        return !isExists;\r\n                        }),\r\n                    password: Yup.string()\r\n                        .min(6, 'Must be between 6 and 50 characters')\r\n                        .max(50, 'Must be between 6 and 50 characters')\r\n                        .required('Required'),\r\n                    confirmPassword: Yup.string()\r\n                        .required('Required')\r\n                        .when(\"password\", {\r\n                            is: value => (value && value.length > 0 ? true : false),\r\n                            then: Yup.string().oneOf(\r\n                            [Yup.ref(\"password\")],\r\n                            \"Confirm Password do not match\"\r\n                            )\r\n                        }),\r\n                    email: Yup.string()\r\n                        .email('Invalid email address')\r\n                        .required('Required')\r\n                        .test('checkExistsEmail', 'This email is already registered.', async email => {\r\n                            // call api\r\n                            const isExists = await userApi.existsByEmail(email);\r\n                            return !isExists;\r\n                        }),\r\n                    \r\n                    \r\n                })\r\n          }\r\n\r\n          onSubmit={\r\n            async values => {\r\n              try {\r\n                await userApi.createAccountFromAdmin(values);\r\n                // show notification\r\n                showSuccessNotification(\r\n                  \"Create Addcount\",\r\n                  \"Create Account Successfully!\"\r\n                );\r\n                // close modal\r\n                setOpenModalCreate(false);\r\n                // Refresh table\r\n                props.refreshForm();\r\n              } catch (error) {\r\n                console.log(error);\r\n                setOpenModalCreate(false);\r\n                // redirect page error server\r\n                props.history.push(\"/auth/500\");\r\n              }\r\n            }\r\n          }\r\n\r\n          validateOnChange={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting }) => (\r\n            <Form>\r\n              {/* header */}\r\n              <ModalHeader>Create Account</ModalHeader>\r\n\r\n              {/* body */}\r\n              <ModalBody className=\"m-3\">\r\n              <FormGroup>\r\n                    <FastField\r\n                      label=\"First Name\"\r\n                      type=\"text\"\r\n                      bsSize=\"lg\"\r\n                      name=\"firstName\"\r\n                      placeholder=\"Enter first name\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </FormGroup>\r\n\r\n                  <FormGroup>\r\n                    <FastField\r\n                      label=\"Last Name\"\r\n                      type=\"text\"\r\n                      bsSize=\"lg\"\r\n                      name=\"lastName\"\r\n                      placeholder=\"Enter last name\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </FormGroup>\r\n\r\n                  <FormGroup>\r\n                    <FastField\r\n                      label=\"Username\"\r\n                      type=\"text\"\r\n                      bsSize=\"lg\"\r\n                      name=\"userName\"\r\n                      placeholder=\"Enter username\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </FormGroup>\r\n\r\n                  <FormGroup>\r\n                    <FastField\r\n                      label=\"Email\"\r\n                      type=\"email\"\r\n                      bsSize=\"lg\"\r\n                      name=\"email\"\r\n                      placeholder=\"Enter email\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </FormGroup>\r\n\r\n                  <FormGroup>\r\n                    <FastField\r\n                      label=\"Password\"\r\n                      type=\"password\"\r\n                      bsSize=\"lg\"\r\n                      name=\"password\"\r\n                      placeholder=\"Enter password\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </FormGroup>\r\n\r\n                  <FormGroup>\r\n                    <FastField\r\n                      label=\"Confirm Password\"\r\n                      type=\"password\"\r\n                      bsSize=\"lg\"\r\n                      name=\"confirmPassword\"\r\n                      placeholder=\"Enter confirm password\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </FormGroup>\r\n\r\n                  <FormGroup>\r\n                    <Label label-for=\"role\" >Select role</Label>\r\n                    <Field as=\"select\" name=\"role\" placeholder=\"Select role\">\r\n                      <option value=\"admin\">Admin</option>\r\n                      <option value=\"manager\">Manager</option>\r\n                      <option value=\"user\">User</option>\r\n                    </Field>\r\n                  </FormGroup>\r\n\r\n                  \r\n              </ModalBody>\r\n\r\n              {/* footer */}\r\n              <ModalFooter>\r\n                <Button type=\"submit\" color=\"primary\" disabled={isSubmitting}>\r\n                  Save\r\n                </Button>{\" \"}\r\n\r\n                <Button color=\"primary\" onClick={() => setOpenModalCreate(false)}>\r\n                  Close\r\n                </Button>\r\n              </ModalFooter>\r\n            </Form>\r\n          )}\r\n        </Formik >\r\n      </Modal>\r\n  )\r\n\r\n}\r\n\r\nexport default AddAccountAdmin;"]},"metadata":{},"sourceType":"module"}